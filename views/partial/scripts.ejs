<script type="text/javascript">
    let isMap;
    let map;
    let markers;

    function loadMap() {
        mapboxgl.accessToken = 'pk.eyJ1IjoibTFyaGFuIiwiYSI6ImNsOWcyZ2R3MjB6ZGIzc2w5MDJxOGhyMWQifQ.brpjAQBJ_dX2-GC48ESjLQ';
        const bounds = {
            "n": 40.976808,
            "s": 40.966777,
            "e": 29.160553,
            "w": 29.136874
        }
        const maxBounds = [
            [bounds.w, bounds.s],
            [bounds.e, bounds.n]
        ];
        map = new mapboxgl.Map({
            container: 'map', // container ID
            style: 'mapbox://styles/mapbox/streets-v11', // style URL
            center: [29.152371, 40.971908], // starting position [lng, lat]
            zoom: 16, // starting zoom
            maxBounds: maxBounds
        });
        map.addControl(new mapboxgl.NavigationControl());
        isMap = true;
    }
</script>

<script type="text/javascript">
    function getStops() {
        let stopTiles = [];
        let stops = [
            [29.153344380065, 40.974822619286, "<h2><b>ÜST KAPI</b></h2>"],
            [29.151670681641, 40.973380759457, "<h2><b>MEYDAN</b></h2>"],
            [29.150640713384, 40.97224669026, "<h2><b>ALT KAPI</b></h2>"],
            [29.151971089063, 40.973101294219, "<h2><b>HAZIRLIK/REKTÖRLÜK BİNASI</b></h2>"],
            [29.155074404904, 40.969561298688, "<h2><b>HAZIRLIK/KIZ ÖĞRENCİ YURTLARI</b></h2>"],
            [29.154602675823, 40.970086900884, "<h2><b>KIZ ÖĞRENCİ YURTLARI 2</b></h2>"],
            [29.153786944578, 40.971691799306, "<h2><b>HUKUK FAKÜLTESİ/SOSYAL TESİSLER BİNASI</b></h2>"],
            [29.151142833566, 40.97286479837, "<h2><b>TIP FAKÜLTESİ/KIZ ÖĞRENCİ YURDU</b></h2>"],
            [29.152829735672, 40.970678258758, "<h2><b>SOSYAL TESİSLER ALT/GÜZEL SANATLAR FAKÜLTESİ</b></h2>"]
        ]
        for (const stop of stops) {
            stopTiles.push({
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": [stop[0], stop[1]]
                },
                "properties": {
                    "title": stop[2],
                    "description": null
                }
            });
        }

        return stopTiles;
    }
</script>

<script type="text/javascript">
    function getBuses(url) {
        return fetch(url).then(function(response) {
                return response.json();
            })
            .then(function(json) {
                var data = json;
                var busesIn = []
                for (const busKey of Object.keys(data)) {
                    let bus = data[busKey]
                    if (typeof(bus) != "object") continue;
                    var busData = {
                        id: bus.plaka,
                        title: bus.plaka,
                        description: bus.durum,
                        state: bus.durum == 'ILERLIYOR' ? 1 : bus.durum == 'HIZLANIYOR' ? 1 : bus.durum == 'DURUYOR' ? 2 : bus.durum == 'KONTAK_KAPALI' ? 3 : 0,
                        address: bus.adres,
                        coordinates: [bus.lon, bus.lat],
                        longitude: bus.lon,
                        latitude: bus.lat,
                        speed: bus.hizzz,
                        lastUpdate: bus.sonGuncelleme
                    }
                    busesIn.push({
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [busData.longitude, busData.latitude]
                        },
                        "properties": busData
                    });
                }
                return busesIn;
            })
            .catch(function(error) {
                console.log(error);
                return false
            })
    }
</script>

<script type="text/javascript">
    loadMap();
    let url = 'https://oksum.com.tr/api/bekleme/ringVer.php';
    let url2 = 'https://bekleme.yeditepe.edu.tr/bekleme-data-ring/ringVer.php';

    const bus1 = 'https://play-lh.googleusercontent.com/JDfB2QDQveFutv48lFTm3UbmDQpFdFHP1lDJYFHEmFxVIf9D9_jrfqL_nR0WFr4eXEpk';
    const bus2 = 'https://play-lh.googleusercontent.com/P_MuHwUV03yMdvEpc-Gm-WtjLKmo5DdW1dXg9T2VdprOrilIKuz9ql7VelYV-PF05Kk=w240-h480-rw';
    const bus3 = 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Aiga_bus_on_red_circle.svg/1024px-Aiga_bus_on_red_circle.svg.png';
    const bus4 = 'https://cdn0.iconfinder.com/data/icons/transportation-86/24/bus-circle-512.png';

    map.on('load', async function() {
        let buses = await getBuses(url);
        if (!buses) buses = await getBuses(url2);

        const stops = getStops();

        map.addSource("stops", {
            type: "geojson",
            data: {
                type: "FeatureCollection",
                features: stops,
            },
        });

        map.addSource("buses", {
            type: "geojson",
            data: {
                type: "FeatureCollection",
                features: buses,
            },
        });

        map.loadImage(bus4, (error, image) => {
            if (error) throw error;
            if (!map.hasImage('bus4')) map.addImage('bus4', image);
            map.addLayer({
                id: "circles0",
                type: "symbol",
                source: "buses",
                layout: {
                    'icon-image': 'bus4',
                    'icon-size': 0.015
                }
            });
            map.setFilter('circles0', ['==', 'state', 0]);
        });

        map.loadImage(bus1, (error, image) => {
            if (error) throw error;
            if (!map.hasImage('bus1')) map.addImage('bus1', image);
            map.addLayer({
                id: "circles1",
                type: "symbol",
                source: "buses",
                layout: {
                    'icon-image': 'bus1',
                    'icon-size': 0.072
                }
            });
            map.setFilter('circles1', ['==', 'state', 1]);
        });

        map.loadImage(bus2, (error, image) => {
            if (error) throw error;
            if (!map.hasImage('bus2')) map.addImage('bus2', image);
            map.addLayer({
                id: "circles2",
                type: "symbol",
                source: "buses",
                layout: {
                    'icon-image': 'bus2',
                    'icon-size': 0.18
                }
            });
            map.setFilter('circles2', ['==', 'state', 2]);
        });

        map.loadImage(bus3, (error, image) => {
            if (error) throw error;
            if (!map.hasImage('bus3')) map.addImage('bus3', image);
            map.addLayer({
                id: "circles3",
                type: "symbol",
                source: "buses",
                layout: {
                    'icon-image': 'bus3',
                    'icon-size': 0.03
                }
            });
            map.setFilter('circles3', ['==', 'state', 3]);
        });

        map.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Map_pin_icon.svg/800px-Map_pin_icon.svg.png', (error, image) => {
            if (error) throw error;
            if (!map.hasImage('marker')) map.addImage('marker', image);

            map.addLayer({
                id: "stops",
                type: "symbol",
                source: "stops",
                layout: {
                    'icon-image': 'marker', // reference the image
                    'icon-size': 0.017
                }
            });

        });

        let popup = new mapboxgl.Popup({
            offset: [0, -15],
            closeButton: false,
            closeOnClick: false
        })

        map.on('click', (event) => {
            // If the user clicked on one of your markers, get its information.
            const features = map.queryRenderedFeatures(event.point, {
                layers: ['circles0', 'circles1', 'circles2', 'circles3'] // replace with your layer name
            });
            if (!features.length) {
                return;
            }
            const feature = features[0];
            if (!feature.properties.title) return;

            popup
                .setLngLat(feature.geometry.coordinates)
                .setHTML(
                    `<h3>${feature.properties.title}</h3><p>Durum: <strong>${feature.properties.description}</strong><br />Adres: <strong>${feature.properties.address}</strong></p>`
                )
                .addTo(map);
        });

        map.on('click', (event) => {
            // If the user clicked on one of your markers, get its information.
            const features = map.queryRenderedFeatures(event.point, {
                layers: ['stops'] // replace with your layer name
            });
            if (!features.length) {
                return;
            }
            const feature = features[0];
            if (!feature.properties.title) return;
            popup
                .setLngLat(feature.geometry.coordinates)
                .setHTML(feature.properties.title)
                .addTo(map);
        });

        map.on('mousemove', (e) => {
            const features = map.queryRenderedFeatures(e.point);
            const displayProperties = [
                'properties'
            ];

            const displayFeatures = features.map((feat) => {
                const displayFeat = {};
                displayProperties.forEach((prop) => {
                    displayFeat[prop] = feat[prop];
                });
                return displayFeat;
            });

            const coordinates = features[0].geometry.coordinates.slice();
            const title = features[0].properties.title;
            // Write object as string with an indent of two spaces.
            if (title) {
                map.getCanvas().style.cursor = "pointer";
                const description = features[0].properties.description;
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }

                let innerHtml;

                if (description != null) {
                    innerHtml = `<h3>${features[0].properties.title}</h3><p>Durum: <strong>${features[0].properties.description}</strong><br />Adres: <strong>${features[0].properties.address}</strong></p>`;
                } else {
                    innerHtml = title
                }

                popup.setLngLat(coordinates).setHTML(innerHtml).addTo(map);
            } else {
                map.getCanvas().style.cursor = "crosshair";
                popup.remove();
            }
        });

        window.setInterval(async function() {
            buses = await getBuses(url)
            if (!buses) buses = await getBuses(url2);
            map.getSource("buses").setData({
                type: "FeatureCollection",
                features: buses,
            });
        }, 1000);
    });
</script>